name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    name: Code Quality and Security Checks
    runs-on: ubuntu-latest

    steps:
      # Checkout code dari repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 bandit safety

      # 1. Flake8 untuk Code Quality
      - name: Run Flake8 (Code Quality)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics > flake8_report.txt || true
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics >> flake8_report.txt
      - name: Upload Flake8 Report
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8_report.txt

      # 2. Bandit untuk Static Application Security Testing (SAST)
      - name: Run Bandit (SAST)
        run: |
          bandit -r . -o bandit_report.txt -f txt || true
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit_report.txt

      # 3. Safety untuk Dependency Scanning
      - name: Run Safety (Dependency Scanning)
        run: |
          safety check -r requirements.txt > safety_report.txt || true
      - name: Upload Safety Report
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety_report.txt

  # Optional: Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Build Docker Image
      - name: Build Docker image
        run: |
          docker build -t flask-app:latest .

      # Trivy untuk Container Scanning
      - name: Scan Docker Image for Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'flask-app:latest'
          format: 'table'
          output: 'trivy_report.txt'
          exit-code: '0' # Prevent pipeline failure
          ignore-unfixed: true
          vuln-type: 'os,library'

      # Upload Trivy Report
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy_report.txt
