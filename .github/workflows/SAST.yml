name: SAST Pipeline

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  code-quality:
    name: SAST
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 bandit safety

      - name: Run Flake8 (Code Quality)
        id: flake8
        continue-on-error: true
        run: |
          flake8 . --count --exit-zero --select=E9,F63,F7,F82 --max-complexity=10 --max-line-length=127 --statistics > flake8_report.txt

      - name: Upload Flake8 Report
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8_report.txt

      - name: Run Bandit (SAST)
        id: bandit
        continue-on-error: true
        run: |
          bandit -r . -o bandit_report.txt -f txt

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit_report.txt

      - name: Run Safety (Dependency Scanning)
        id: safety
        continue-on-error: true
        run: |
          safety check -r requirements.txt --full-report > safety_report.txt

      - name: Upload Safety Report
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety_report.txt

      - name: Final Check for Issues
        run: |
          echo "üîé Checking reports for issues..."
          has_issues=false

          # Flake8 Report
          if grep -q "E9\|F63\|F7\|F82" flake8_report.txt; then
            echo "‚ùå Flake8 found issues!"
            has_issues=true
          fi

          # Bandit Report
          if grep -q "Issue:" bandit_report.txt; then
            echo "‚ùå Bandit found security issues!"
            has_issues=true
          fi

          # Safety Report
          if grep -q "vulnerable" safety_report.txt; then
            echo "‚ùå Safety found vulnerable dependencies!"
            has_issues=true
          fi

          # Force pipeline failure if any issues existt
          if [ "$has_issues" = true ]; then
            echo "‚ùå Security and Quality Checks Failed!"
            exit 1
          else
            echo "‚úÖ All checks passed successfully!"
          fi

  build-and-push:
    name: Build and Push to Docker Hub
    # continue-on-error: true
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t new_app:latest .
          docker tag new_app:latest ${{ secrets.DOCKER_USERNAME }}/new_app:latest

      - name: Run Trivy (Container Scanning)
        run: |
          # Install Trivy
          curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.39.1/trivy_0.39.1_Linux-64bit.deb -o trivy.deb
          sudo dpkg -i trivy.deb
          # Scan Docker image for vulnerabilities
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ secrets.DOCKER_USERNAME }}/new_app:latest
        # continue-on-error: true

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/new_app:latest
        #test

      - name: Check docker
        run: |
          docker run -d -p 8081:5000 ${{ secrets.DOCKER_USERNAME }}/new_app:latest
          docker ps